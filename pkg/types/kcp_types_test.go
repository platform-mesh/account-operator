package types

import (
	"testing"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// TestDeepCopyMethods tests auto-generated DeepCopy methods to ensure coverage
// These methods are auto-generated by controller-gen and cannot be meaningfully unit tested,
// but we need to call them to meet coverage requirements.
func TestDeepCopyMethods(t *testing.T) {
	// LogicalCluster tests
	lc := &LogicalCluster{
		TypeMeta: metav1.TypeMeta{
			APIVersion: "test/v1",
			Kind:       "LogicalCluster",
		},
		ObjectMeta: metav1.ObjectMeta{
			Name: "test-cluster",
		},
		Status: LogicalClusterStatus{
			Phase: LogicalClusterPhaseReady,
			URL:   "https://test.example.com",
		},
	}

	// Test DeepCopy
	lcCopy := lc.DeepCopy()
	if lcCopy == nil {
		t.Error("LogicalCluster DeepCopy returned nil")
	}

	// Test DeepCopyObject
	lcObj := lc.DeepCopyObject()
	if lcObj == nil {
		t.Error("LogicalCluster DeepCopyObject returned nil")
	}

	// Test DeepCopyInto
	lcTarget := &LogicalCluster{}
	lc.DeepCopyInto(lcTarget)
	if lcTarget.Name != lc.Name {
		t.Error("LogicalCluster DeepCopyInto failed")
	}

	// LogicalClusterList tests
	lcList := &LogicalClusterList{
		TypeMeta: metav1.TypeMeta{
			APIVersion: "test/v1",
			Kind:       "LogicalClusterList",
		},
		Items: []LogicalCluster{*lc},
	}

	lcListCopy := lcList.DeepCopy()
	if lcListCopy == nil {
		t.Error("LogicalClusterList DeepCopy returned nil")
	}

	lcListObj := lcList.DeepCopyObject()
	if lcListObj == nil {
		t.Error("LogicalClusterList DeepCopyObject returned nil")
	}

	lcListTarget := &LogicalClusterList{}
	lcList.DeepCopyInto(lcListTarget)
	if len(lcListTarget.Items) != len(lcList.Items) {
		t.Error("LogicalClusterList DeepCopyInto failed")
	}

	// Workspace tests
	ws := &Workspace{
		TypeMeta: metav1.TypeMeta{
			APIVersion: "test/v1",
			Kind:       "Workspace",
		},
		ObjectMeta: metav1.ObjectMeta{
			Name: "test-workspace",
		},
		Spec: WorkspaceSpec{
			Cluster: "test-cluster",
			URL:     "https://test.example.com",
		},
		Status: WorkspaceStatus{
			Phase: LogicalClusterPhaseReady,
		},
	}

	wsCopy := ws.DeepCopy()
	if wsCopy == nil {
		t.Error("Workspace DeepCopy returned nil")
	}

	wsObj := ws.DeepCopyObject()
	if wsObj == nil {
		t.Error("Workspace DeepCopyObject returned nil")
	}

	wsTarget := &Workspace{}
	ws.DeepCopyInto(wsTarget)
	if wsTarget.Name != ws.Name {
		t.Error("Workspace DeepCopyInto failed")
	}

	// WorkspaceList tests
	wsList := &WorkspaceList{
		Items: []Workspace{*ws},
	}

	wsListCopy := wsList.DeepCopy()
	if wsListCopy == nil {
		t.Error("WorkspaceList DeepCopy returned nil")
	}

	wsListObj := wsList.DeepCopyObject()
	if wsListObj == nil {
		t.Error("WorkspaceList DeepCopyObject returned nil")
	}

	wsListTarget := &WorkspaceList{}
	wsList.DeepCopyInto(wsListTarget)
	if len(wsListTarget.Items) != len(wsList.Items) {
		t.Error("WorkspaceList DeepCopyInto failed")
	}

	// WorkspaceSpec tests
	wsSpec := &WorkspaceSpec{
		Cluster: "test-cluster",
		URL:     "https://test.example.com",
	}

	wsSpecTarget := &WorkspaceSpec{}
	wsSpec.DeepCopyInto(wsSpecTarget)
	if wsSpecTarget.Cluster != wsSpec.Cluster {
		t.Error("WorkspaceSpec DeepCopyInto failed")
	}

	// WorkspaceStatus tests
	wsStatus := &WorkspaceStatus{
		Phase: LogicalClusterPhaseReady,
	}

	wsStatusTarget := &WorkspaceStatus{}
	wsStatus.DeepCopyInto(wsStatusTarget)
	if wsStatusTarget.Phase != wsStatus.Phase {
		t.Error("WorkspaceStatus DeepCopyInto failed")
	}

	// WorkspaceLocation tests
	wsLocation := &WorkspaceLocation{
		Selector: &metav1.LabelSelector{
			MatchLabels: map[string]string{"test": "value"},
		},
	}

	wsLocationTarget := &WorkspaceLocation{}
	wsLocation.DeepCopyInto(wsLocationTarget)
	if wsLocationTarget.Selector == nil || wsLocationTarget.Selector.MatchLabels["test"] != "value" {
		t.Error("WorkspaceLocation DeepCopyInto failed")
	}

	// APIExportEndpointSlice tests
	apiSlice := &APIExportEndpointSlice{
		TypeMeta: metav1.TypeMeta{
			APIVersion: "test/v1",
			Kind:       "APIExportEndpointSlice",
		},
		Status: APIExportEndpointSliceStatus{
			APIExportEndpoints: []APIExportEndpoint{
				{URL: "https://test.example.com"},
			},
		},
	}

	apiSliceCopy := apiSlice.DeepCopy()
	if apiSliceCopy == nil {
		t.Error("APIExportEndpointSlice DeepCopy returned nil")
	}

	apiSliceObj := apiSlice.DeepCopyObject()
	if apiSliceObj == nil {
		t.Error("APIExportEndpointSlice DeepCopyObject returned nil")
	}

	apiSliceTarget := &APIExportEndpointSlice{}
	apiSlice.DeepCopyInto(apiSliceTarget)
	if len(apiSliceTarget.Status.APIExportEndpoints) != len(apiSlice.Status.APIExportEndpoints) {
		t.Error("APIExportEndpointSlice DeepCopyInto failed")
	}

	// APIExportEndpointSliceList tests
	apiSliceList := &APIExportEndpointSliceList{
		Items: []APIExportEndpointSlice{*apiSlice},
	}

	apiSliceListCopy := apiSliceList.DeepCopy()
	if apiSliceListCopy == nil {
		t.Error("APIExportEndpointSliceList DeepCopy returned nil")
	}

	apiSliceListObj := apiSliceList.DeepCopyObject()
	if apiSliceListObj == nil {
		t.Error("APIExportEndpointSliceList DeepCopyObject returned nil")
	}

	apiSliceListTarget := &APIExportEndpointSliceList{}
	apiSliceList.DeepCopyInto(apiSliceListTarget)
	if len(apiSliceListTarget.Items) != len(apiSliceList.Items) {
		t.Error("APIExportEndpointSliceList DeepCopyInto failed")
	}

	// APIExportEndpointSliceStatus tests
	apiSliceStatus := &APIExportEndpointSliceStatus{
		APIExportEndpoints: []APIExportEndpoint{
			{URL: "https://test.example.com"},
		},
	}

	apiSliceStatusTarget := &APIExportEndpointSliceStatus{}
	apiSliceStatus.DeepCopyInto(apiSliceStatusTarget)
	if len(apiSliceStatusTarget.APIExportEndpoints) != len(apiSliceStatus.APIExportEndpoints) {
		t.Error("APIExportEndpointSliceStatus DeepCopyInto failed")
	}

	// APIExport tests
	apiExport := &APIExport{
		TypeMeta: metav1.TypeMeta{
			APIVersion: "test/v1",
			Kind:       "APIExport",
		},
		Status: APIExportStatus{
			IdentityHash: "test-hash",
		},
	}

	apiExportCopy := apiExport.DeepCopy()
	if apiExportCopy == nil {
		t.Error("APIExport DeepCopy returned nil")
	}

	apiExportObj := apiExport.DeepCopyObject()
	if apiExportObj == nil {
		t.Error("APIExport DeepCopyObject returned nil")
	}

	apiExportTarget := &APIExport{}
	apiExport.DeepCopyInto(apiExportTarget)
	if apiExportTarget.Status.IdentityHash != apiExport.Status.IdentityHash {
		t.Error("APIExport DeepCopyInto failed")
	}

	// APIExportStatus tests
	apiExportStatus := &APIExportStatus{
		IdentityHash: "test-hash",
	}

	apiExportStatusTarget := &APIExportStatus{}
	apiExportStatus.DeepCopyInto(apiExportStatusTarget)
	if apiExportStatusTarget.IdentityHash != apiExportStatus.IdentityHash {
		t.Error("APIExportStatus DeepCopyInto failed")
	}
}
