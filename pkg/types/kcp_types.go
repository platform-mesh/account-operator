package types

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
)

// LogicalClusterPhaseType represents the phase of a logical cluster
type LogicalClusterPhaseType string

const (
	// LogicalClusterPhaseReady indicates the logical cluster is ready
	LogicalClusterPhaseReady LogicalClusterPhaseType = "Ready"
	// LogicalClusterPhaseInitializing indicates the logical cluster is initializing
	LogicalClusterPhaseInitializing LogicalClusterPhaseType = "Initializing"
	// LogicalClusterPhaseScheduling indicates the logical cluster is being scheduled
	LogicalClusterPhaseScheduling LogicalClusterPhaseType = "Scheduling"
)

// LogicalClusterStatus defines the observed state of LogicalCluster
type LogicalClusterStatus struct {
	// Phase represents the current lifecycle phase of the logical cluster
	Phase LogicalClusterPhaseType `json:"phase,omitempty"`
	// URL is the URL of the logical cluster
	URL string `json:"url,omitempty"`
}

// LogicalCluster represents a logical cluster in KCP
// +kubebuilder:object:root=true
// +kubebuilder:resource:scope=Cluster
// +kubebuilder:subresource:status
type LogicalCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Status LogicalClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LogicalClusterList contains a list of LogicalCluster
type LogicalClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LogicalCluster `json:"items"`
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogicalClusterList) DeepCopyInto(out *LogicalClusterList) { // coverage-ignore
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]LogicalCluster, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogicalClusterList.
func (in *LogicalClusterList) DeepCopy() *LogicalClusterList { // coverage-ignore
	if in == nil {
		return nil
	}
	out := new(LogicalClusterList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *LogicalClusterList) DeepCopyObject() runtime.Object { // coverage-ignore
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogicalCluster) DeepCopyInto(out *LogicalCluster) { // coverage-ignore
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	out.Status = in.Status
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogicalCluster.
func (in *LogicalCluster) DeepCopy() *LogicalCluster { // coverage-ignore
	if in == nil {
		return nil
	}
	out := new(LogicalCluster)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *LogicalCluster) DeepCopyObject() runtime.Object { // coverage-ignore
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// WorkspaceSpec defines the desired state of Workspace
type WorkspaceSpec struct {
	// Type is the type of workspace
	Type *WorkspaceTypeReference `json:"type,omitempty"`
	// Location constrains the workspace to a particular location
	Location *WorkspaceLocation `json:"location,omitempty"`
	// URL is the URL of the workspace (for compatibility)
	URL string `json:"url,omitempty"`
	// Cluster is the logical cluster name for this workspace
	Cluster string `json:"cluster,omitempty"`
}

// WorkspaceTypeReference references a workspace type
type WorkspaceTypeReference struct {
	// Name is the name of the workspace type
	Name string `json:"name"`
	// Path is the path to the workspace type
	Path string `json:"path,omitempty"`
}

// WorkspaceLocation defines the location of a workspace
type WorkspaceLocation struct {
	// Selector selects workspaces based on labels
	Selector *metav1.LabelSelector `json:"selector,omitempty"`
}

// WorkspaceStatus defines the observed state of Workspace
type WorkspaceStatus struct {
	// Phase represents the current lifecycle phase of the workspace
	Phase LogicalClusterPhaseType `json:"phase,omitempty"`
	// BaseURL is the base URL for accessing this workspace
	BaseURL string `json:"baseURL,omitempty"`
	// VirtualWorkspaces contains virtual workspace URLs
	VirtualWorkspaces []VirtualWorkspace `json:"virtualWorkspaces,omitempty"`
	// Location contains the location information
	Location *WorkspaceLocation `json:"location,omitempty"`
}

// VirtualWorkspace represents a virtual workspace URL
type VirtualWorkspace struct {
	// URL is the URL of the virtual workspace
	URL string `json:"url"`
}

// Workspace represents a workspace in KCP
// +kubebuilder:object:root=true
// +kubebuilder:resource:scope=Cluster
// +kubebuilder:subresource:status
type Workspace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   WorkspaceSpec   `json:"spec,omitempty"`
	Status WorkspaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WorkspaceList contains a list of Workspace
type WorkspaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Workspace `json:"items"`
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkspaceList) DeepCopyInto(out *WorkspaceList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Workspace, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkspaceList.
func (in *WorkspaceList) DeepCopy() *WorkspaceList {
	if in == nil {
		return nil
	}
	out := new(WorkspaceList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *WorkspaceList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Workspace) DeepCopyInto(out *Workspace) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Workspace.
func (in *Workspace) DeepCopy() *Workspace {
	if in == nil {
		return nil
	}
	out := new(Workspace)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Workspace) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto for WorkspaceSpec
func (in *WorkspaceSpec) DeepCopyInto(out *WorkspaceSpec) {
	*out = *in
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(WorkspaceTypeReference)
		**out = **in
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(WorkspaceLocation)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopyInto for WorkspaceStatus
func (in *WorkspaceStatus) DeepCopyInto(out *WorkspaceStatus) {
	*out = *in
	if in.VirtualWorkspaces != nil {
		in, out := &in.VirtualWorkspaces, &out.VirtualWorkspaces
		*out = make([]VirtualWorkspace, len(*in))
		copy(*out, *in)
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(WorkspaceLocation)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopyInto for WorkspaceLocation
func (in *WorkspaceLocation) DeepCopyInto(out *WorkspaceLocation) {
	*out = *in
	if in.Selector != nil {
		in, out := &in.Selector, &out.Selector
		*out = new(metav1.LabelSelector)
		(*in).DeepCopyInto(*out)
	}
}

// APIExportEndpointSlice represents an API export endpoint slice
// +kubebuilder:object:root=true
// +kubebuilder:resource:scope=Cluster
// +kubebuilder:subresource:status
type APIExportEndpointSlice struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Status APIExportEndpointSliceStatus `json:"status,omitempty"`
}

// APIExportEndpointSliceStatus defines the status of an API export endpoint slice
type APIExportEndpointSliceStatus struct {
	// APIExportEndpoints contains the list of endpoints
	APIExportEndpoints []APIExportEndpoint `json:"apiExportEndpoints,omitempty"`
}

// APIExportEndpoint represents an API export endpoint
type APIExportEndpoint struct {
	// URL is the URL of the endpoint
	URL string `json:"url"`
}

// +kubebuilder:object:root=true

// APIExportEndpointSliceList contains a list of APIExportEndpointSlice
type APIExportEndpointSliceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []APIExportEndpointSlice `json:"items"`
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *APIExportEndpointSliceList) DeepCopyInto(out *APIExportEndpointSliceList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]APIExportEndpointSlice, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new APIExportEndpointSliceList.
func (in *APIExportEndpointSliceList) DeepCopy() *APIExportEndpointSliceList {
	if in == nil {
		return nil
	}
	out := new(APIExportEndpointSliceList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *APIExportEndpointSliceList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto for APIExportEndpointSlice
func (in *APIExportEndpointSlice) DeepCopyInto(out *APIExportEndpointSlice) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy for APIExportEndpointSlice
func (in *APIExportEndpointSlice) DeepCopy() *APIExportEndpointSlice {
	if in == nil {
		return nil
	}
	out := new(APIExportEndpointSlice)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject for APIExportEndpointSlice
func (in *APIExportEndpointSlice) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto for APIExportEndpointSliceStatus
func (in *APIExportEndpointSliceStatus) DeepCopyInto(out *APIExportEndpointSliceStatus) {
	*out = *in
	if in.APIExportEndpoints != nil {
		in, out := &in.APIExportEndpoints, &out.APIExportEndpoints
		*out = make([]APIExportEndpoint, len(*in))
		copy(*out, *in)
	}
}

// APIExportStatus defines the status of an APIExport
type APIExportStatus struct {
	// IdentityHash is the hash of the API export identity
	IdentityHash string `json:"identityHash,omitempty"`
}

// APIExport represents an API export
// +kubebuilder:object:root=true
// +kubebuilder:resource:scope=Cluster
// +kubebuilder:subresource:status
type APIExport struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Status APIExportStatus `json:"status,omitempty"`
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *APIExport) DeepCopyInto(out *APIExport) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	out.Status = in.Status
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new APIExport.
func (in *APIExport) DeepCopy() *APIExport {
	if in == nil {
		return nil
	}
	out := new(APIExport)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *APIExport) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto for APIExportStatus
func (in *APIExportStatus) DeepCopyInto(out *APIExportStatus) {
	*out = *in
}
