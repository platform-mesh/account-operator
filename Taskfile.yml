version: '3'

dotenv: ['.taskenv', '.secret/.env', '{{.HOME}}/.env' ]
vars:
  LOCAL_BIN: bin
  CONTROLLER_TOOLS_VERSION: v0.19.0
  ENVTEST_K8S_VERSION: "1.29.0"
  ENVTEST_VERSION: release-0.17
  CRD_DIRECTORY: config/crd
  TEST_SETUP_DIRECTORY: test/setup/01-platform-mesh-system
  KCP_APIGEN_VERSION: v0.27.1
  KCP_VERSION: 0.27.1
  GOMPLATE_VERSION: v4.3.0
  GOARCH:
    sh: go env GOARCH
  GOOS:
    sh: go env GOOS
  IMAGE_REPO: ghcr.io/platform-mesh/account-operator
tasks:
  ## Setup
  setup:controller-gen:
    internal: true
    cmds:
      - test -s {{.LOCAL_BIN}}/controller-gen || GOBIN=$(pwd)/{{.LOCAL_BIN}} go install sigs.k8s.io/controller-tools/cmd/controller-gen@{{.CONTROLLER_TOOLS_VERSION}}
  setup:kcp:
    internal: true
    cmds:
      - mkdir -p {{.LOCAL_BIN}}
      - test -s {{.LOCAL_BIN}}/kcp || (which kcp && cp $(which kcp) {{.LOCAL_BIN}}/kcp) || (echo "KCP binary not found, downloading..." && curl -L -o {{.LOCAL_BIN}}/kcp https://github.com/kcp-dev/kcp/releases/download/v{{.KCP_VERSION}}/kcp_{{.KCP_VERSION}}_{{.GOOS}}_{{.GOARCH}}.tar.gz && tar -xzf {{.LOCAL_BIN}}/kcp -C {{.LOCAL_BIN}} --strip-components=1 && chmod +x {{.LOCAL_BIN}}/kcp) || echo "Failed to setup KCP, skipping..."
  setup:gomplate:
    internal: true
    cmds:
      - mkdir -p {{.LOCAL_BIN}}
      - test -s {{.LOCAL_BIN}}/gomplate || (curl -o {{.LOCAL_BIN}}/gomplate -sSL https://github.com/hairyhenderson/gomplate/releases/download/{{ .GOMPLATE_VERSION }}/gomplate_{{ .GOOS }}-{{ .GOARCH }} && chmod +x {{.LOCAL_BIN}}/gomplate) || echo "Failed to setup gomplate, skipping..."
  setup:golangci-lint:
    internal: true
    cmds:
      - test -s {{.LOCAL_BIN}}/golangci-lint || GOBIN=$(pwd)/{{.LOCAL_BIN}} go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
  setup:kcp-api-gen:
    internal: true
    cmds:
      - test -s {{.LOCAL_BIN}}/apigen || GOBIN=$(pwd)/{{.LOCAL_BIN}} go install github.com/kcp-dev/kcp/sdk/cmd/apigen@{{.KCP_APIGEN_VERSION}}

  ## Development
  manifests:
    deps: [setup:controller-gen,setup:kcp-api-gen]
    cmds:
      - "{{.LOCAL_BIN}}/controller-gen rbac:roleName=manager-role crd paths=./... output:crd:artifacts:config={{.CRD_DIRECTORY}}"
  generate:
    cmds:
      - task: manifests
      - "{{.LOCAL_BIN}}/controller-gen object:headerFile=hack/boilerplate.go.txt paths=./..."
      - "{{.LOCAL_BIN}}/apigen --input-dir {{.CRD_DIRECTORY}} --output-dir ./config/resources"
      - "{{.LOCAL_BIN}}/apigen --input-dir {{.CRD_DIRECTORY}} --output-dir {{ .TEST_SETUP_DIRECTORY }}"
  build:
    cmds:
      - go build ./...
  docker-build:
    cmds:
      - docker build .
  ## Testing
  fmt:
    cmds:
      - go fmt ./...
  lint:
    deps: [setup:golangci-lint]
    cmds:
      - task: fmt
      - "{{.LOCAL_BIN}}/golangci-lint run --timeout 15m ./..."
  envtest:
    cmds:
      - go test ./... {{.ADDITIONAL_COMMAND_ARGS}}
  test:
    cmds:
      - task: envtest
        vars:
          ADDITIONAL_COMMAND_ARGS: ""
    env:
      KCP_VERSION: "{{.KCP_VERSION}}"
  test-with-deps:
    deps: [setup:kcp, setup:gomplate]
    cmds:
      - task: test
  cover:
    cmds:
      - task: envtest
        vars:
          ADDITIONAL_COMMAND_ARGS: -coverprofile=./cover.out -covermode=atomic -coverpkg=./...
  cover-with-deps:
    deps: [setup:kcp, setup:gomplate]
    cmds:
      - task: cover
  start-kcp:
    deps: [setup:kcp]
    cmds:
      - "{{ .LOCAL_BIN }}/kcp start"

